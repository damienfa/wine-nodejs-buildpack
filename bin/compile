#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>
PACKAGES_LIST=(
   "libc6-i386 lib32stdc++6 lib32gcc1 lib32ncurses5"
   "lib32z1"
)

export PATH=:/usr/local/bin:$PATH

# fail fast
set -e

# debug
set -x

BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
ROOT_DIR=$(dirname $BIN_DIR)

# parse and derive params
BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
echo "BIN_DIR is : $BIN_DIR"
BUILD_DIR=$1
echo "BUILD_DIR is : $BUILD_DIR"
CACHE_DIR=$2
echo "CACHE_DIR is : $CACHE_DIR"
LP_DIR=`cd $(dirname $0); cd ..; pwd`


function error() {
  echo " !     $*" >&2
  exit 1
}

function topic() {
  echo "-----> $*"
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

#DPKG_CACHE_DIR="$BUILD_DIR/dpkg"
APT_CACHE_DIR="$CACHE_DIR/apt/cache"
APT_STATE_DIR="$CACHE_DIR/apt/state"
#DPKG_CACHE_DIR="$CACHE_DIR/dpkg/cache"

topic "Create dir..."
mkdir -p "$BUILD_DIR/.profile.d"
mkdir -p "$APT_CACHE_DIR/archives/partial"


APT_OPTIONS="-o debug::nolocking=true -o dir::cache=$APT_CACHE_DIR -o dir::state=$APT_STATE_DIR"


#topic "try it..."
#fakeroot dpkg --add-architecture i386


topic "Updating apt caches"

apt-get $APT_OPTIONS update | indent



#### DPKG
#topic "DPKG i386..."
#dpkg --add-architecture i386 $BUILD_DIR/.dpkg/

#for DEB in $(ls -1 $DPKG_CACHE_DIR/*.deb); do
#  topic "Installing $(basename $DEB)"
#  dpkg -x $DEB $BUILD_DIR/.dpkg/
#done

#topic "Writing dpkg profile script"
#mkdir -p "$BUILD_DIR/.profile.d"
#cat <<EOF >$BUILD_DIR/.profile.d/000_dpkg.sh
#export PATH="\$HOME/.dpkg/usr/bin:$PATH"
#export LD_LIBRARY_PATH="\$HOME/.dpkg/usr/lib:\$LD_LIBRARY_PATH"
#export LD_LIBRARY_PATH="\$HOME/.dpkg/usr/lib/x86_64-linux-gnu:\$LD_LIBRARY_PATH"
#export LD_LIBRARY_PATH="\$HOME/.dpkg/lib:\$LD_LIBRARY_PATH"
#export LD_LIBRARY_PATH="\$HOME/.dpkg/lib/x86_64-linux-gnu:\$LD_LIBRARY_PATH"
#export LD_LIBRARY_PATH="\$HOME/.dpkg/lib64:\$LD_LIBRARY_PATH"
#export INCLUDE_PATH="\$HOME/.dpkg/usr/include:\$INCLUDE_PATH"
#export CPATH="\$INCLUDE_PATH"
#export CPPPATH="\$INCLUDE_PATH"
#EOF
#sh $BUILD_DIR/.profile.d/000_dpkg.sh



for PACKAGE in "${PACKAGES_LIST[@]}"; do
  if [[ $PACKAGE == *deb ]]; then
    PACKAGE_NAME=$(basename $PACKAGE .deb)
    PACKAGE_FILE=$APT_CACHE_DIR/archives/$PACKAGE_NAME.deb

    topic "Fetching $PACKAGE"
    curl -s -L -z $PACKAGE_FILE -o $PACKAGE_FILE $PACKAGE 2>&1 | indent
  else
    topic "Fetching .debs for $PACKAGE"
    apt-get $APT_OPTIONS -y --force-yes -d install --reinstall $PACKAGE | indent
  fi
done


#### APT

mkdir -p $BUILD_DIR/.apt

for DEB in $(ls -1 $APT_CACHE_DIR/archives/*.deb); do
  topic "Installing $(basename $DEB)"
  dpkg -x $DEB $BUILD_DIR/.apt/
done

topic "Writing apt profile script"

cat <<EOF >$BUILD_DIR/.profile.d/000_apt.sh
export PATH="\$HOME/.apt/usr/bin:\$HOME/.apt/wine-devel/bin:\$PATH"
export LD_LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$HOME/.apt/wine-devel/lib:\$HOME/.apt/wine-devel/lib64:\$HOME/.apt/lib:\$LD_LIBRARY_PATH"
export LIBRARY_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu:\$HOME/.apt/usr/lib/i386-linux-gnu:\$HOME/.apt/usr/lib:\$HOME/.apt/wine-devel/lib:\$HOME/.apt/wine-devel/lib64:\$HOME/.apt/lib:\$LIBRARY_PATH"
export INCLUDE_PATH="\$HOME/.apt/usr/include:\$HOME/.apt/usr/share:\$INCLUDE_PATH"
export CPATH="\$INCLUDE_PATH"
export CPPPATH="\$INCLUDE_PATH"
export PKG_CONFIG_PATH="\$HOME/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/i386-linux-gnu/pkgconfig:\$HOME/.apt/usr/lib/pkgconfig:\$PKG_CONFIG_PATH"
EOF

source $BUILD_DIR/.profile.d/000_apt.sh

#########
#
#ls -a "$HOME/.apt"

#topic "debug 2"
#ls -a "$APT_STATE_DIR/lists"

#topic "debug 3"
#whereis add-apt-repository

#topic "add-apt-repository stuff ..."
#/usr/bin/python3 $BIN_DIR/add-apt-repository -y ppa:wine/wine-builds

#topic "Install wine ... "
###########




export PATH="$BUILD_DIR/.apt/usr/bin:$BUILD_DIR/.apt/usr/lib/python3:$PATH"
export LD_LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:$BUILD_DIR/.apt/usr/lib/python3:$BUILD_DIR/.apt/lib:$LD_LIBRARY_PATH"
export LIBRARY_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu:$BUILD_DIR/.apt/usr/lib:$BUILD_DIR/.apt/usr/lib/python3:$BUILD_DIR/.apt/lib:$LIBRARY_PATH"
export INCLUDE_PATH="$BUILD_DIR/.apt/usr/include:$BUILD_DIR/.apt/usr/share:$INCLUDE_PATH"
export CPATH="$INCLUDE_PATH"
export CPPPATH="$INCLUDE_PATH"
export PKG_CONFIG_PATH="$BUILD_DIR/.apt/usr/lib/x86_64-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/i386-linux-gnu/pkgconfig:$BUILD_DIR/.apt/usr/lib/pkgconfig:$PKG_CONFIG_PATH"
export PYTHONPATH="/$BUILD_DIR/.apt/usr/lib/python3/dist-packages"

#give environment to later buildpacks
export | grep -E -e ' (PATH|LD_LIBRARY_PATH|LIBRARY_PATH|INCLUDE_PATH|CPATH|CPPPATH|PKG_CONFIG_PATH)='  > "$LP_DIR/export"


wget -P /app http://www.damienf.info/test/package-wine.tar.gz
tar -zxvf /app/package-wine.tar.gz
mkdir -p /app/.apt/package-wine
mv var/cache/apt/archives /app/.apt
mv /app/.apt/archives package-wine
rm package-wine.tar.gz
rm -r var
for DEB in $(ls -1 /app/.apt/package-wine/*.deb); do
  echo "Installing $(basename $DEB)"
  dpkg -x $DEB $HOME/.apt/
done;



#apt-get $APT_OPTIONS update | indent

#topic "WINE"
#apt-get $APT_OPTIONS -y --force-yes -d install -y --install-recommends wine:i386 | indent
#wget http://www.damienf.info/test/wine-git.tar.gz
#tar -zxvf ./wine-git.tar.gz wine-git
#cd wine-git
#ls -all wine-git

#topic "should configure..."
#./configure --host=i386-linux-gnu "CFLAGS=-m32" "CXXFLAGS=-m32" "LDFLAGS=-m32"
#make
#make install

#add-apt-repository -y ppa:wine/wine-builds
